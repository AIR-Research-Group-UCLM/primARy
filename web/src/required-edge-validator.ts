import { Edge } from "./types";

// TODO: this could be more elegant if the nodes in DFS order are generated by a generator
export function existsPath(sourceNodeId: string, targetNodeId: string, edges: Edge[]) {
    const graph = Map.groupBy(edges, (edge) => edge.source)

    const stack = [sourceNodeId];
    const visited = new Set();

    while (stack.length !== 0) {
        const currentNodeId = stack.pop()!;

        if (currentNodeId === targetNodeId) {
            return true;
        }

        const adjacentEdges = graph.get(currentNodeId) ?? [];
        for (const adjacentEdge of adjacentEdges) {
            if (visited.has(adjacentEdge.target)) {
                continue;
            }

            visited.add(adjacentEdge.target);
            stack.push(adjacentEdge.target);
        }
    }

    return false;
}